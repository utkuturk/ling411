library( languageR )
data( "dative" )
View(dative)
library( dplyr )
library( magrittr )
dative_essential <- dative %>% dplyr::select( . , AnimacyOfRec , AnimacyOfTheme , RealizationOfRecipient)
View(dative_essential)
pGridOfNP <- seq(from = 0 , to= 1, length.out =(nrow(dative_essential)))
priorOfNP <- rep(1, (as.integer(nrow(dative_essential))))
dative_essential$realNP <- ifelse( dative_essential$RealizationOfRecipient == "NP" , T , F )
likelihoodOfNP <- dbinom(length(which(dative_essential$realNP == 1)), size = (as.integer(nrow(dative_essential))), prob = pGridOfNP)
posteriorOfNP <- (likelihoodOfNP * priorOfNP)/sum(likelihoodOfNP * priorOfNP)
mean(posteriorOfNP)
(NumberOfNP <- length(which(dative_essential$realNP == 1)))
(NumberOfPP <- length(which(dative_essential$realNP == 0)))
grid < expand.grid(100, 100)
# define a grid for p_NP with 100 points
grid <- expand.grid(100, 100)
View(grid)
# define a grid for p_NP with 100 points
grid <- expand.grid(length=100, length=100)
View(grid)
# define a grid for p_NP with 100 points
grid <- sample(pGridOfNP, prob=posteriorOfNP, size = 100, replace = TRUE)
# define a likelihood *function* with the parameter p_NP, such that it returns the probability of the data for any given
# value of p_NP (don't calculate the likelihood here, just define a function which computes the likelihood)
likelihoodfn <- function(p_NP) dbinom(length(which(dative_essential$realNP == 1)), size = (as.integer(nrow(dative_essential))), prob = p_NP)
# calculate the likelihood for each value on the grid (feel free to use or not to use sapply). store the result in 'likelihood'
likelihood <- sapply(definedGridNP, function(p_NP) likelihoodfn(p_NP))
# calculate the likelihood for each value on the grid (feel free to use or not to use sapply). store the result in 'likelihood'
likelihood <- sapply(grid, function(p_NP) likelihoodfn(p_NP))
# define a prior distribution *function* with the parameter p_NP, such that it returns the value of the prior at this point
# for for any given value of p_NP (don't calculate the prior values here, just define a function which determines them)
priorDistributionfn <- function(p_NP) dunif(grid, 0, 1)
# calculate the prior for each value on the grid. store the result in 'prior'
prior <- sapply(grid, function(p_NP) priorDistributionfn(p_NP))
# compute the unstandardized posterior. store the result in 'unst_posterior'
unst_posterior <- prior*likelihood
# standardize the posterior vector. store the results in 'posterior'
posterior <- unst_posterior/sum(unst_posterior)
# plot the posterior for each point on the grid
plot(posterior)
# sample 10^4 values from the posterior. store the result in 'samples_posterior'
samples_posterior <-  sample( definedGridNP , size=10e4 , replace=TRUE , prob= posteriorOf)
# sample 10^4 values from the posterior. store the result in 'samples_posterior'
samples_posterior <-  sample( grid , size=10e4 , replace=TRUE , prob= posteriorOf)
# sample 10^4 values from the posterior. store the result in 'samples_posterior'
samples_posterior <-  sample( grid , size=10e4 , replace=TRUE , prob= posterior)
# sample 10^4 values from the posterior. store the result in 'samples_posterior'
samples_posterior <-  sample( grid , size=10e4 , replace=TRUE , prob=posterior)
mu.list <- seq( from=0, to=1 , length.out=100 )
sigma.list <- seq( from=0 , to=1 , length.out=100 )
grid <- expand.grid( mu=mu.list , sigma=sigma.list)
# sample 10^4 values from the posterior. store the result in 'samples_posterior'
samples_posterior <-  sample( grid , size=10e4 , replace=TRUE , prob=posterior)
# sample 10^4 values from the posterior. store the result in 'samples_posterior'
samples_posterior <-  sample( grid , size=1e4 , replace=TRUE , prob=posterior)
# sample 10^4 values from the posterior. store the result in 'samples_posterior'
samples_posterior <-  sample( grid , size=10^4 , replace=TRUE , prob=posterior)
# define a likelihood *function* with the parameter p_NP, such that it returns the probability of the data for any given
# value of p_NP (don't calculate the likelihood here, just define a function which computes the likelihood)
likelihoodfn <- function(p_NP) dbinom(length(which(dative_essential$realNP == 1)), size = (as.integer(nrow(dative_essential))), prob = p_NP)
# calculate the likelihood for each value on the grid (feel free to use or not to use sapply). store the result in 'likelihood'
likelihood <- sapply(grid, function(p_NP) likelihoodfn(p_NP))
# define a prior distribution *function* with the parameter p_NP, such that it returns the value of the prior at this point
# for for any given value of p_NP (don't calculate the prior values here, just define a function which determines them)
priorDistributionfn <- function(p_NP) dunif(grid, 0, 1)
# calculate the prior for each value on the grid. store the result in 'prior'
prior <- sapply(grid, function(p_NP) priorDistributionfn(p_NP))
# calculate the prior for each value on the grid. store the result in 'prior'
prior <- sapply(x, function(p_NP) priorDistributionfn(p_NP))
View(posterior)
# define a grid for p_NP with 100 points
grid <- sample(pGridOfNP, prob=posteriorOfNP, size = 10000, replace = TRUE)
# define a likelihood *function* with the parameter p_NP, such that it returns the probability of the data for any given
# value of p_NP (don't calculate the likelihood here, just define a function which computes the likelihood)
likelihoodfn <- function(p_NP) dbinom(length(which(dative_essential$realNP == 1)), size = (as.integer(nrow(dative_essential))), prob = p_NP)
# calculate the likelihood for each value on the grid (feel free to use or not to use sapply). store the result in 'likelihood'
likelihood <- sapply(grid, function(p_NP) likelihoodfn(p_NP))
# define a prior distribution *function* with the parameter p_NP, such that it returns the value of the prior at this point
# for for any given value of p_NP (don't calculate the prior values here, just define a function which determines them)
priorDistributionfn <- function(p_NP) dunif(grid, 0, 1)
# calculate the prior for each value on the grid. store the result in 'prior'
prior <- sapply(grid, function(p_NP) priorDistributionfn(p_NP))
# compute the unstandardized posterior. store the result in 'unst_posterior'
unst_posterior <- prior*likelihood
# standardize the posterior vector. store the results in 'posterior'
posterior <- unst_posterior/sum(unst_posterior)
# plot the posterior for each point on the grid
plot(posterior)
# sample 10^4 values from the posterior. store the result in 'samples_posterior'
samples_posterior <-  sample( grid , size=10e4 , replace=TRUE , prob= posterior)
# sample 10^4 values from the posterior. store the result in 'samples_posterior'
samples_posterior <-  sample( grid , size=1e4 , replace=TRUE , prob= posterior)
# sample 10^4 values from the posterior. store the result in 'samples_posterior'
samples_posterior <-  sample( grid , size=10^4 , replace=TRUE , prob= posterior)
# define a grid for p_NP with 100 points
grid <- sample(pGridOfNP, prob=posteriorOfNP, size = 100, replace = TRUE)
View(dative_essential)
# take a subset of 'dative_essential', where the theme is animate. store the result as 'dative_animtheme'
dative_animtheme <- dative_essential %>% dplyr::select(., -matches("inanimate"))
View(dative_animtheme)
View(dative_animtheme)
# take a subset of 'dative_essential', where the theme is animate. store the result as 'dative_animtheme'
dative_animtheme <- dative_essential[!(dative_essential$AnimacyOfTheme %in% "inanimate"),]
View(dative_animtheme)
View(dative_animtheme)
(NumberOfNPanimth <- length(which(dative_animtheme$realNP == 1)))
(NumberOfPPanimth <- length(which(dative_animtheme$realNP == 0)))
# define a likelihood *function* with the parameter p_NP, such that it returns the probability of the data for the
# animate theme cases for any given value of p_NP (don't calculate the likelihood here, just define a function which computes the likelihood)
likelihoodfnanimth <- function(p_NP) dbinom(length(which(dative_animtheme$realNP == 1)), size = (as.integer(nrow(dative_animtheme))), prob = p_NP)
# calculate the likelihood for each value on the grid (feel free to use or not to use sapply). store the result in 'likelihood_animtheme'
likelihood_animtheme <- sapply(grid, function(p_NP) likelihoodfnanimth(p_NP))
# calculate the prior for each value on the grid. store the result in 'prior_animtheme'
prior_animtheme <- sapply(grid, function(p_NP) priorDistributionfn(p_NP))
# compute the unstandardized posterior. store the result in 'unst_posterior_animtheme'
unst_posterior_animtheme <- prior_animtheme*likelihood_animtheme
# standardize the posterior vector. store the results in 'posterior_animtheme'
posterior_animtheme <- unst_posterior_animtheme/sum(unst_posterior_animtheme)
# plot the posterior for each point on the grid
plot(posterior_animtheme)
# plot the posterior for each point on the grid
plot(grid, posterior_animtheme)
# plot the posterior for each point on the grid
plot(sort(posterior_animtheme))
# sample 10^4 values from the posterior. store the result in 'samples_posterior_animtheme'
samples_posterior <-  sample( grid , size=10^4 , replace=TRUE , prob= posterior)
# sample 10^4 values from the posterior. store the result in 'samples_posterior_animtheme'
samples_posterior_animtheme <-  sample( grid , size=10^3 , replace=TRUE , prob= posterior)
# sample 10^4 values from the posterior. store the result in 'samples_posterior_animtheme'
samples_posterior_animtheme <-  sample( grid , size=10^4 , replace=TRUE , prob= posterior_animtheme)
library( languageR )
data( "dative" )
View(dative)
# create a data.frame named 'dative_essential' containing only the columns representing the animacy of the recipient and theme,
# as well as the realization of recepient
library( dplyr )
library( magrittr )
dative_essential <- dative %>% dplyr::select( . , AnimacyOfRec , AnimacyOfTheme , RealizationOfRecipient)
View(dative_essential)
### In the following, let's answer the the following question: What is the overall (marginal) proportion of NP realizations (henceforth: p_NP)?
### Answer it by perforiming a grid approximation of the posterior distribution of p_NP
# use 'dative_essential' to determine the numbers of NP realizations and PP realizations in the dataset
dative_essential$realNP <- ifelse( dative_essential$RealizationOfRecipient == "NP" , T , F )
(NumberOfNP <- length(which(dative_essential$realNP == 1)))
(NumberOfPP <- length(which(dative_essential$realNP == 0)))
# define a grid for p_NP with 100 points
grid <- seq(from = 0 , to= 1, length.out =100)
# define a likelihood *function* with the parameter p_NP, such that it returns the probability of the data for any given
# value of p_NP (don't calculate the likelihood here, just define a function which computes the likelihood)
likelihoodfn <- function(p_NP) dbinom(length(which(dative_essential$realNP == 1)), size = (as.integer(nrow(dative_essential))), prob = p_NP)
length(which(dative_essential$realNP == 1))
# calculate the likelihood for each value on the grid (feel free to use or not to use sapply). store the result in 'likelihood'
likelihood <- sapply(1:length(grid), function(p_NP) likelihoodfn(grid[p_NP]))
1:length(grid)
# define a prior distribution *function* with the parameter p_NP, such that it returns the value of the prior at this point
# for for any given value of p_NP (don't calculate the prior values here, just define a function which determines them)
priorDistributionfn <- function(p_NP) dunif(p_NP, min = 0 , max = 100)
# calculate the prior for each value on the grid. store the result in 'prior'
prior <- sapply(1:length(grid), function(p_NP) priorDistributionfn(grid[p_NP]))
# compute the unstandardized posterior. store the result in 'unst_posterior'
unst_posterior <- prior*likelihood
# standardize the posterior vector. store the results in 'posterior'
posterior <- unst_posterior/sum(unst_posterior)
# plot the posterior for each point on the grid
plot(posterior)
plot(sort(posterior))
# plot the posterior for each point on the grid
plot(posterior)
plot(sort(posterior))
# sample 10^4 values from the posterior. store the result in 'samples_posterior'
samples_posterior <-  sample( grid , size=10^4 , replace=TRUE , prob= posterior)
df_samples_posterior <- data.frame(samples_posterior)
library(ggplot2)
ggplot(df_samples_posterior, aes(samples_posterior)) + geom_histogram()
# plot the posterior for each point on the grid
plot(posterior)
# load the 'dative' data.frame from the package 'languageR'
library( languageR )
data( "dative" )
View(dative)
# create a data.frame named 'dative_essential' containing only the columns representing the animacy of the recipient and theme,
# as well as the realization of recepient
library( dplyr )
library( magrittr )
dative_essential <- dative %>% dplyr::select( . , AnimacyOfRec , AnimacyOfTheme , RealizationOfRecipient)
View(dative_essential)
### In the following, let's answer the the following question: What is the overall (marginal) proportion of NP realizations (henceforth: p_NP)?
### Answer it by perforiming a grid approximation of the posterior distribution of p_NP
# use 'dative_essential' to determine the numbers of NP realizations and PP realizations in the dataset
dative_essential$realNP <- ifelse( dative_essential$RealizationOfRecipient == "NP" , T , F )
(NumberOfNP <- length(which(dative_essential$realNP == 1)))
(NumberOfPP <- length(which(dative_essential$realNP == 0)))
# define a grid for p_NP with 100 points
grid <- seq(from = 0 , to= 1, length.out =100)
# define a likelihood *function* with the parameter p_NP, such that it returns the probability of the data for any given
# value of p_NP (don't calculate the likelihood here, just define a function which computes the likelihood)
likelihoodfn <- function(p_NP) dbinom(length(which(dative_essential$realNP == 1)), size = (as.integer(nrow(dative_essential))), prob = p_NP)
length(which(dative_essential$realNP == 1))
#return data
# calculate the likelihood for each value on the grid (feel free to use or not to use sapply). store the result in 'likelihood'
likelihood <- sapply(1:length(grid), function(p_NP) likelihoodfn(grid[p_NP]))
1:length(grid)
# define a prior distribution *function* with the parameter p_NP, such that it returns the value of the prior at this point
# for for any given value of p_NP (don't calculate the prior values here, just define a function which determines them)
priorDistributionfn <- function(p_NP) dunif(p_NP, min = 0 , max = 100)
# calculate the prior for each value on the grid. store the result in 'prior'
prior <- sapply(1:length(grid), function(p_NP) priorDistributionfn(grid[p_NP]))
# compute the unstandardized posterior. store the result in 'unst_posterior'
unst_posterior <- prior*likelihood
# standardize the posterior vector. store the results in 'posterior'
posterior <- unst_posterior/sum(unst_posterior)
# plot the posterior for each point on the grid
plot(posterior)
plot(sort(posterior))
# sample 10^4 values from the posterior. store the result in 'samples_posterior'
samples_posterior <-  sample( grid , size=10^4 , replace=TRUE , prob= posterior)
# plot the posterior for each point on the grid
plot(posterior)
plot(sort(posterior))
# sample 10^4 values from the posterior. store the result in 'samples_posterior'
samples_posterior <-  sample( grid , size=10^4 , replace=TRUE , prob= posterior)
###I get incorrect number of probabilities? I didnt understand the reason
# let's look at the histogram of the posterior
df_samples_posterior <- data.frame(samples_posterior)
library(ggplot2)
ggplot(df_samples_posterior, aes(samples_posterior)) + geom_histogram()
# plot the posterior for each point on the grid
plot(posterior)
ggplot(df_samples_posterior, aes(samples_posterior)) + geom_histogram()
# take a subset of 'dative_essential', where the theme is animate. store the result as 'dative_animtheme'
dative_animtheme <- dative_essential[!(dative_essential$AnimacyOfTheme %in% "inanimate"),]
(NumberOfNPanimth <- length(which(dative_animtheme$realNP == 1)))
(NumberOfPPanimth <- length(which(dative_animtheme$realNP == 0)))
# define a likelihood *function* with the parameter p_NP, such that it returns the probability of the data for the
# animate theme cases for any given value of p_NP (don't calculate the likelihood here, just define a function which computes the likelihood)
likelihoodfnanimth <- function(p_NP) dbinom(length(which(dative_animtheme$realNP == 1)), size = (as.integer(nrow(dative_animtheme))), prob = p_NP)
# add return code.
# calculate the likelihood for each value on the grid (feel free to use or not to use sapply). store the result in 'likelihood_animtheme'
likelihood_animtheme <- sapply(1:length(grid), function(p_NP) likelihoodfnanimth(grid[p_NP]))
# calculate the prior for each value on the grid. store the result in 'prior_animtheme'
prior_animtheme <- sapply(1:length(grid), function(p_NP) priorDistributionfn(grid[p_NP]))
# compute the unstandardized posterior. store the result in 'unst_posterior_animtheme'
unst_posterior_animtheme <- prior_animtheme*likelihood_animtheme
# standardize the posterior vector. store the results in 'posterior_animtheme'
posterior_animtheme <- unst_posterior_animtheme/sum(unst_posterior_animtheme)
# plot the posterior for each point on the grid
plot(sort(posterior_animtheme))
# sample 10^4 values from the posterior. store the result in 'samples_posterior_animtheme'
samples_posterior_animtheme <-  sample( grid , size=10^4 , replace=TRUE , prob= posterior_animtheme)
# let's look at the histogram of the posterior
df_samples_posterior_animtheme <- data.frame(samples_posterior_animtheme)
ggplot(df_samples_posterior_animtheme, aes(samples_posterior_animtheme)) + geom_histogram()
# plot the posterior for each point on the grid
plot(posterior_animtheme)
# sample 10^4 values from the posterior. store the result in 'samples_posterior_animtheme'
samples_posterior_animtheme <-  sample( grid , size=10^10 , replace=TRUE , prob= posterior_animtheme)
# sample 10^4 values from the posterior. store the result in 'samples_posterior_animtheme'
samples_posterior_animtheme <-  sample( grid , size=10^10 , replace=TRUE , prob= posterior_animtheme)
# sample 10^4 values from the posterior. store the result in 'samples_posterior_animtheme'
samples_posterior_animtheme <-  sample( grid , size=10^7 , replace=TRUE , prob= posterior_animtheme)
# let's look at the histogram of the posterior
df_samples_posterior_animtheme <- data.frame(samples_posterior_animtheme)
library(ggplot2)
ggplot(df_samples_posterior_animtheme, aes(samples_posterior_animtheme)) + geom_histogram()
### BONUS PROBLEM: How can we determine the posterior for the difference in p_NP between the animate and inanimate theme cases?
#i didnot even understand how I came to this point. right now i dont even know what i have been doing, just following the class notes and examples.
#pls help me.
#we have sample for two things. get samples for both of them.
sample_posterior_inanimtheme <- samples_posterior
samples_posterior_animtheme
samples_posterior_inanimtheme
### BONUS PROBLEM: How can we determine the posterior for the difference in p_NP between the animate and inanimate theme cases?
#i didnot even understand how I came to this point. right now i dont even know what i have been doing, just following the class notes and examples.
#pls help me.
#we have sample for two things. get samples for both of them.
samples_posterior_inanimtheme <- samples_posterior
samples_posterior_inanimtheme
hist(samples_posterior_animtheme)
hist(samples_posterior_inanimtheme)
setwd("~/Dropbox/Academia/Masters/REMEDIAL 1ST/METHODOLOGY/ASSIGNMENTS")
install.packages(c("backports", "brms", "curl", "htmlTable", "reshape2"))
