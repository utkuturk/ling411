install.packages("readr")
install.packages("readr")
install.packages("readr")
library(readr)
# read in, and format the frequency data
df <- readr::read_delim("../DATABASE/word_forms_stems_and_frequencies_full.txt", delim = "\t" , comment = "#",
col_names = c("wordform", "stem", "morph", "frequency"))
#we have to define what delim is.
#we have a comment in it with hash. so we have to define that too.
#define column names
head(df)
library(dplyr)
morphNoun <- dplyr::filter(df, morph == "Noun+A3sg+P3sg+Nom")
#we want to select the top ten thousand, first we need to order them
library(magrittr)
df %<>% dplyr::arrange(frequency)
### df <- dplyr::arrange(df, frequency)
## but this gave us the least frequent ones at the top. we want the top ones first.
df %<>% dplyr::arrange(desc(frequency))
head(df)
#do nrow for the rows.
nrow(df)
sum(df$frequency)
df$frequency_per_million <- 10^6 * df$frequency / sum(df$frequency)
# extract a subset to work with
df_analysis <- head(df, 10000)
#df_analysis <- df[1:10000]
#deternmine the length
install.packages("stringr")
install.packages("stringr")
library(stringr)
df_analysis$wordform_length <- stringr::str_length(df_analysis$wordform)
ggplot(df_analysis, aes(wordform_length, frequency_per_million)) + geom_point()
library(ggplot2)
ggplot(df_analysis, aes(wordform_length, frequency_per_million)) + geom_point()
# create a log-frequency column
df_analysis$log_frequency_per_million <- log(df_analysis$frequency_per_million)
# not this one, but we need a log one, that s the meaningful one.
ggplot(df_analysis, aes(wordform_length, log_frequency_per_million)) + geom_point()
# fit a linear model for log(frequency) ~ length
library(rethinking)
# fit a linear model for log(frequency) ~ length
library(devtools)
devtools::install_github("rmcelreath/rethinking")
library(readr)
# read in, and format the frequency data
df <- readr::read_delim("../DATABASE/word_forms_stems_and_frequencies_full.txt", delim = "\t" , comment = "#",
col_names = c("wordform", "stem", "morph", "frequency"))
#we have to define what delim is.
#we have a comment in it with hash. so we have to define that too.
#define column names
head(df)
library(dplyr)
morphNoun <- dplyr::filter(df, morph == "Noun+A3sg+P3sg+Nom")
#we want to select the top ten thousand, first we need to order them
library(magrittr)
df %<>% dplyr::arrange(frequency)
### df <- dplyr::arrange(df, frequency)
## but this gave us the least frequent ones at the top. we want the top ones first.
df %<>% dplyr::arrange(desc(frequency))
head(df)
#do nrow for the rows.
nrow(df)
sum(df$frequency)
df$frequency_per_million <- 10^6 * df$frequency / sum(df$frequency)
# extract a subset to work with
df_analysis <- head(df, 10000)
#df_analysis <- df[1:10000]
#deternmine the length
install.packages("stringr")
library(stringr)
df_analysis$wordform_length <- stringr::str_length(df_analysis$wordform)
df_analysis$system_length <- stringr::str_length(df_analysis$stem)
head(df_analysis)
# create a log-frequency column
df_analysis$log_frequency_per_million <- log(df_analysis$frequency_per_million)
library(ggplot2)
ggplot(df_analysis, aes(wordform_length, frequency_per_million)) + geom_point()
# not this one, but we need a log one, that s the meaningful one.
ggplot(df_analysis, aes(wordform_length, log_frequency_per_million)) + geom_point()
# fit a linear model for log(frequency) ~ length
library(devtools)
devtools::install_github("rmcelreath/rethinking")
install.packages("rstan")
devtools::install_github("rmcelreath/rethinking")
library("rstan", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
